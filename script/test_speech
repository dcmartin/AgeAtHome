#!/bin/csh -fb

if (! -e /usr/local/bin/brew) then
   echo "*** NO HOME BREW?  Install from http://brew.sh"
   exit
endif
if (! -e /usr/local/bin/jq) then 
   echo "*** BREWING 'jq' ..."
   brew install jq
endif

if ($#argv > 0) then
    @ i = 1
    set t = "$argv[1]"
    if (($#t == 1) && ($#argv > 1)) then
	if ($t == "-v") then
	    set voice = $argv[2]
	    @ i = 2
	endif
    endif
    if ($#argv > $i) then
	@ i++
        set say = "$argv[$i-]"
    endif
endif
if ($?say == 0) set say = "make american great again"

set creds = ~$USER/.watson.speech-to-text.json
if (-e $creds) then
     set username = `egrep username $creds | awk '{ print $2 }' | sed 's/.*"\(.*\)".*/\1/g'`
     set password = `egrep password $creds | awk '{ print $2 }' | sed 's/.*"\(.*\)".*/\1/g'`
     set url = `egrep url $creds | awk '{ print $2 }' | sed 's/".*https:\/\/\(.*\)".*/\1/g'`

     set TU = 'https://'"$username"':'"$password"'@'"$url"'/'
else if ($?TU == 0) then
    echo "*** NO CREDENTIALS ($creds); create file and copy credentials from "Text-to-Speech" service on bluemix.net"
    exit
endif

# 
echo "*** USING API AT URL: $TU"

# report on models
echo "*** AVAILABLE MODELS"
curl -s -q -L $TU/v1/models | /usr/local/bin/jq -c .
set default_model = "en-US_BroadbandModel"
echo "*** DETAILS ON DEFAULT MODEL ( $default_model )"
curl -s -q -L $TU/v1/models/$default_model | /usr/local/bin/jq -c .

# find a voice
set voices_en = `say -v \? | egrep en_ | awk '{ print $1 }'`
if ($?voice) then
    foreach v ( all $voices_en none )
        if ($v == $voice) break
    end
    if ($v == none) unset voice
endif
if ($?voice == 0) set voice = Agnes

if ($voice != "all") set voices_en = $voice

foreach voice ($voices_en) 
    echo "*** MAKING A WAVE FILE /tmp/$0:t.$$.wav"
    echo "$say" | say -v $voice -o /tmp/$0:t.$$.wav --data-format=LEF32@16000
    # echo "$say" | say -v $voice 
    if (-e /tmp/$0:t.$$.wav) then
	@ it = `date +%s`
	echo "*** SUBMITTING WAVE FILE SAYING ($say) USING VOICE ($voice)"
	curl -s -q -L $TU'/v1/recognize?timestamps=true&word_alternatives_threshold=0.9' \
	    -o /tmp/$0:t.$$.json \
	    -X POST \
	    --header 'Content-Type: audio/wav' \
	    --data-binary @/tmp/$0:t.$$.wav
	# get end seconds and calculate elapsed
	@ tt = `date +%s`
	@ et = $tt - $it
	echo "*** RESULTS USING $default_model (/tmp/$0:t.$$.json)"
	set results = `/usr/local/bin/jq '.results[]' /tmp/$0:t.$$.json`
	if ($#results != 0) then
	    /usr/local/bin/jq -c '.' /tmp/$0:t.$$.json
	    echo "*** SUMMARY ($et seconds)"
	    set transcript = `/usr/local/bin/jq '.results[].alternatives[]|.transcript' /tmp/$0:t.$$.json`
	    set confidence = `/usr/local/bin/jq '.results[].alternatives[]|.confidence' /tmp/$0:t.$$.json`
	    set percent = `echo "$confidence * 100" | bc`
	    echo "*** TRANSCRIPT: $transcript"
	    echo "Watson recognized $voice saying" | say -r 225 -v Alex
	else
	    echo "*** FAILURE: no results"
	    echo "Watson did not recognize $voice saying" | say -r 225 -v Alex
	endif
	echo $say | say -v $voice
	if ($#results != 0) then
	    echo "as the phrase" | say -r 225 -v Alex
	    echo $transcript | say -v Alex
	    echo "with a confidence of" $percent:r "percent in" $et "seconds" | say -r 225 -v Alex
	endif
	rm /tmp/$0:t.$$.json /tmp/$0:t.$$.wav
    else
	echo "NO SOUND FILE?"
    endif
end
